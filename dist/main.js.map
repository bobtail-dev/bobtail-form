{"version":3,"sources":["../src/main.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;oBAyBe,UAAU,OAAV,EAA8C;AAAA,QAA3B,aAA2B,uEAAb,EAAa;AAAA,QAAT,GAAS,uEAAL,GAAK;;AAC3D,QAAI,OAAO,8BAAa,EAAb,CAAX;AACA,QAAI,QAAQ,QAAQ,IAAR,CAAZ;;AAEA,QAAI,UAAU,sBAAE,MAAM,CAAN,CAAF,CAAd;AACA,QAAI,IAAI,qBAAE,QAAF,CAAW;AAAA,aAAM,qBAAK;AAAA,eAAM,KAAK,IAAL,GAAY,QAAQ,aAAR,CAAsB,aAAtB,CAAlB;AAAA,OAAL,CAAN;AAAA,KAAX,EAA+E,GAA/E,CAAR;;AAEA;AACA,kCAAoB;AAClB,gBAAU,CADQ;AAElB,gBAAU,MAAM,CAAN,CAFQ;AAGlB,eAAS,CACP,EAAC,SAAS,yBAAV,EADO,EAEP,EAAC,WAAW,OAAZ,EAFO,EAGP,EAAC,WAAW,UAAZ,EAHO,EAIP,EAAC,WAAW,SAAZ,EAJO,EAKP,EAAC,WAAW,MAAZ,EALO;AAHS,KAApB;;AAYA,YAAQ,EAAR,CAAW,QAAX,EAAqB,yBAArB,EAAgD,CAAhD;AACA,WAAO,EAAC,YAAD,EAAQ,UAAR,EAAP;AACD,G;;;;;;;;;;;;;;AAAA;;AA9BD;;;;;;;;AAjBA","file":"main.js","sourcesContent":["/**\n * A bobtail extension for building forms with two-way data binding\n * @author Richard Mehlinger\n * @copyright (c) 2017 Richard Mehlinger\n * @license MIT\n * @module bobtail-form\n * @overview An extension to the [bobtail](github.com/bobtail-dev/bobtail) programming framework, implementing\n *           forms with two way data-binding.\n*/\n\nimport $ from 'jquery';\nimport _ from 'underscore';\nimport {transaction, snap} from 'bobtail-rx';\nimport 'jquery-serializejson';\nimport {JsonCell} from 'bobtail-json-cell';\nimport MutationSummary from 'mutation-summary';\n\n/**\n * generates a jQuery form and a JsonCell bound to its current serialization, and returns an object containing both.\n * @param {function} $formFn - Function to create the form. Takes a single argument, the JsonCell to which the form is serialized.\n * @param {object} serializeOpts - options object to pass to jquery.serializeJson\n * @param {number} lag - form will be reserialized at most once every lag milliseconds--see http://underscorejs.org/#debounce\n * @returns {{$form: jQuery, cell: JsonCell}}\n */\n\nexport default function ($formFn, serializeOpts={}, lag=100) {\n  let cell = new JsonCell({});\n  let $form = $formFn(cell);\n\n  let $target = $($form[0]);\n  let s = _.debounce(() => snap(() => cell.data = $target.serializeJSON(serializeOpts)), lag);\n\n  s();\n  new MutationSummary({\n    callback: s,\n    rootNode: $form[0],\n    queries: [\n      {element: 'input, select, textarea'},\n      {attribute: 'value'},\n      {attribute: 'selected'},\n      {attribute: 'checked'},\n      {attribute: 'name'}\n    ]\n  });\n\n  $target.on('change', 'input, select, textarea', s);\n  return {$form, cell};\n};"]}